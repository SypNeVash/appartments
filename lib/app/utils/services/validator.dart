class Validator {
  static String? validateDropDefaultData(value) {
    if (value == null) {
      return '–í–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞.';
    } else {
      return null;
    }
  }

  static String? validatePassword(String? value) {
    String pattern = r'^(?=.*[A-Z])(?=.*[\W_]).{8,16}$';
    RegExp regex = RegExp(pattern);
    if (value == null || value.isEmpty) {
      return '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å';
    } else if (!regex.hasMatch(value)) {
      return '–ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 8-16 —Å–∏–º–≤–æ–ª—ñ–≤, \n–º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω—É –≤–µ–ª–∏–∫—É –ª—ñ—Ç–µ—Ä—É —Ç–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª';
    }
    return null;
  }

  static String? validateName(String? value) {
    if (value == null || value.isEmpty) {
      return '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —ñ–º —è';
    }
    return null;
  }

  String? validateEmail(String? value) {
    String pattern = r'^[^@]+@[^@]+\.[^@]+';
    RegExp regex = RegExp(pattern);
    if (value == null || value.isEmpty) {
      return 'Email is required';
    } else if (!regex.hasMatch(value)) {
      return 'Enter a valid email address';
    }
    return null;
  }

  static String? validateText(String value) {
    if (value.isEmpty) {
      return 'üö© Text is too short.';
    } else {
      return null;
    }
  }

  static String? validatePhoneNumber(String value) {
    if (value.length != 11) {
      return 'üö© Phone number is not valid.';
    } else {
      return null;
    }
  }
}
